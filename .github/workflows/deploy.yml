name: Deploy to Production

on:
  push:
    branches: [dev]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: task_management_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4

      - name: 📦 Install dependencies
        run: |
          # Remove conflicting lock files
          rm -f yarn.lock package-lock.json
          # Install dependencies with fallback strategy
          if [ -f "pnpm-lock.yaml" ]; then
            echo "Installing with existing lockfile..."
            pnpm install --frozen-lockfile || {
              echo "Frozen lockfile failed, regenerating..."
              rm -f pnpm-lock.yaml
              pnpm install
            }
          else
            echo "No lockfile found, installing fresh..."
            pnpm install
          fi

      - name: 🔧 Setup test environment
        run: |
          echo "NODE_ENV=test" >> $GITHUB_ENV
          echo "HOST=localhost" >> $GITHUB_ENV
          echo "PORT=3000" >> $GITHUB_ENV
          echo "DB_TYPE=postgres" >> $GITHUB_ENV
          echo "DB_HOST=localhost" >> $GITHUB_ENV
          echo "DB_PORT=5432" >> $GITHUB_ENV
          echo "DB_USERNAME=postgres" >> $GITHUB_ENV
          echo "DB_PASSWORD=postgres" >> $GITHUB_ENV
          echo "DB_DATABASE=task_management_test" >> $GITHUB_ENV
          echo "JWT_SECRET=test-jwt-secret-key" >> $GITHUB_ENV
          echo "JWT_EXPIRES_IN=1d" >> $GITHUB_ENV
          echo "CORS_ORIGIN=http://localhost:3000" >> $GITHUB_ENV
          echo "COMMON_RATE_LIMIT_WINDOW_MS=900000" >> $GITHUB_ENV
          echo "COMMON_RATE_LIMIT_MAX_REQUESTS=100" >> $GITHUB_ENV
          echo "SMTP_HOST=smtp.gmail.com" >> $GITHUB_ENV
          echo "SMTP_PORT=587" >> $GITHUB_ENV
          echo "SMTP_USER=test@example.com" >> $GITHUB_ENV
          echo "SMTP_PASS=test-password" >> $GITHUB_ENV
          echo "FRONTEND_URL=http://localhost:3000" >> $GITHUB_ENV

      - name: 🧪 Run tests
        run: pnpm run test:cov

  build-and-push:
    name: 🏗️ Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write

    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🐳 Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: 📋 Generate image name
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://task-management-staging.example.com

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: 🔐 Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: 🔄 Update deployment image
        run: |
          kubectl set image deployment/task-management-app \
            task-management=${{ needs.build-and-push.outputs.image }} \
            -n task-management-staging

      - name: ⏳ Wait for rollout
        run: |
          kubectl rollout status deployment/task-management-app \
            -n task-management-staging \
            --timeout=300s

      - name: 🧪 Run health check
        run: |
          kubectl run health-check --rm -i --restart=Never \
            --image=curlimages/curl:latest \
            --namespace=task-management-staging \
            -- curl -f http://task-management-service/health-check

  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://task-management-api.example.com

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: 🔐 Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: 🔄 Update deployment image
        run: |
          kubectl set image deployment/task-management-app \
            task-management=${{ needs.build-and-push.outputs.image }} \
            -n task-management

      - name: ⏳ Wait for rollout
        run: |
          kubectl rollout status deployment/task-management-app \
            -n task-management \
            --timeout=600s

      - name: 🧪 Run health check
        run: |
          kubectl run health-check --rm -i --restart=Never \
            --image=curlimages/curl:latest \
            --namespace=task-management \
            -- curl -f http://task-management-service/health-check

      - name: 📢 Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## 🚀 Release Notes

            Docker Image: `${{ needs.build-and-push.outputs.image }}`

            ### 📋 Changes
            - Automated deployment to production
            - Image digest: `${{ needs.build-and-push.outputs.digest }}`

            ### 🔗 Links
            - [Production URL](https://task-management-api.example.com)
            - [Health Check](https://task-management-api.example.com/health-check)
            - [API Documentation](https://task-management-api.example.com/docs)
          draft: false
          prerelease: false
