name: Build and Test

on:
  push:
    branches: [dev, main]
    tags: ['v*']
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: task_management_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4

      - name: 📦 Install dependencies
        run: |
          # Remove conflicting lock files
          rm -f yarn.lock package-lock.json
          # Install dependencies with fallback strategy
          if [ -f "pnpm-lock.yaml" ]; then
            echo "Installing with existing lockfile..."
            pnpm install --frozen-lockfile || {
              echo "Frozen lockfile failed, regenerating..."
              rm -f pnpm-lock.yaml
              pnpm install
            }
          else
            echo "No lockfile found, installing fresh..."
            pnpm install
          fi

      - name: 🔧 Setup test environment
        run: |
          echo "NODE_ENV=test" >> $GITHUB_ENV
          echo "HOST=localhost" >> $GITHUB_ENV
          echo "PORT=3000" >> $GITHUB_ENV
          echo "DB_TYPE=postgres" >> $GITHUB_ENV
          echo "DB_HOST=localhost" >> $GITHUB_ENV
          echo "DB_PORT=5432" >> $GITHUB_ENV
          echo "DB_USERNAME=postgres" >> $GITHUB_ENV
          echo "DB_PASSWORD=postgres" >> $GITHUB_ENV
          echo "DB_DATABASE=task_management_test" >> $GITHUB_ENV
          echo "JWT_SECRET=test-jwt-secret-key" >> $GITHUB_ENV
          echo "JWT_EXPIRES_IN=1d" >> $GITHUB_ENV
          echo "CORS_ORIGIN=http://localhost:3000" >> $GITHUB_ENV
          echo "COMMON_RATE_LIMIT_WINDOW_MS=900000" >> $GITHUB_ENV
          echo "COMMON_RATE_LIMIT_MAX_REQUESTS=100" >> $GITHUB_ENV
          echo "SMTP_HOST=smtp.gmail.com" >> $GITHUB_ENV
          echo "SMTP_PORT=587" >> $GITHUB_ENV
          echo "SMTP_USER=test@example.com" >> $GITHUB_ENV
          echo "SMTP_PASS=test-password" >> $GITHUB_ENV
          echo "FRONTEND_URL=http://localhost:3000" >> $GITHUB_ENV

      - name: 🧪 Run tests
        run: pnpm run test:cov

  build:
    name: 🏗️ Build Docker Image
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: task-management-app
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🐳 Build Docker image (no push)
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: ✅ Build completed successfully
        run: echo "Docker image built successfully without deployment"
