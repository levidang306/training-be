name: PR Tests

on:
  pull_request:
    branches: [main, dev]
  push:
    branches: [main, dev]

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: task_management_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4

      - name: 📋 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🎯 Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📦 Install dependencies
        run: |
          # Remove conflicting lock files
          rm -f yarn.lock package-lock.json
          # Install dependencies with fallback strategy
          if [ -f "pnpm-lock.yaml" ]; then
            echo "Installing with existing lockfile..."
            pnpm install --frozen-lockfile || {
              echo "Frozen lockfile failed, regenerating..."
              rm -f pnpm-lock.yaml
              pnpm install
            }
          else
            echo "No lockfile found, installing fresh..."
            pnpm install
          fi

      - name: 🔧 Setup test environment
        run: |
          echo "NODE_ENV=test" >> $GITHUB_ENV
          echo "HOST=localhost" >> $GITHUB_ENV
          echo "PORT=3000" >> $GITHUB_ENV
          echo "DB_TYPE=postgres" >> $GITHUB_ENV
          echo "DB_HOST=localhost" >> $GITHUB_ENV
          echo "DB_PORT=5432" >> $GITHUB_ENV
          echo "DB_USERNAME=postgres" >> $GITHUB_ENV
          echo "DB_PASSWORD=postgres" >> $GITHUB_ENV
          echo "DB_DATABASE=task_management_test" >> $GITHUB_ENV
          echo "JWT_SECRET=test-jwt-secret-key" >> $GITHUB_ENV
          echo "JWT_EXPIRES_IN=1d" >> $GITHUB_ENV
          echo "CORS_ORIGIN=http://localhost:3000" >> $GITHUB_ENV
          echo "COMMON_RATE_LIMIT_WINDOW_MS=900000" >> $GITHUB_ENV
          echo "COMMON_RATE_LIMIT_MAX_REQUESTS=100" >> $GITHUB_ENV
          echo "SMTP_HOST=smtp.gmail.com" >> $GITHUB_ENV
          echo "SMTP_PORT=587" >> $GITHUB_ENV
          echo "SMTP_USER=test@example.com" >> $GITHUB_ENV
          echo "SMTP_PASS=test-password" >> $GITHUB_ENV
          echo "FRONTEND_URL=http://localhost:3000" >> $GITHUB_ENV

      - name: 🔍 Run linting
        run: pnpm run lint

      - name: 🏗️ Build application
        run: pnpm run build

      - name: 🧪 Run tests
        run: pnpm run test:cov

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Run security audit
        run: pnpm audit --audit-level moderate

  build-docker:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: task-management-be:pr-${{ github.event.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  pr-comment:
    name: 💬 PR Comment
    runs-on: ubuntu-latest
    needs: [test, security, build-docker]
    if: github.event_name == 'pull_request'

    steps:
      - name: 💬 Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🎉 All checks passed! Your PR is ready for review.\n\n✅ Tests passed\n✅ Security audit passed\n✅ Docker build successful'
            })
